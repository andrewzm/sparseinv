
R version 3.4.0 (2017-04-21) -- "You Stupid Darkness"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "sparseinv"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "sparseinv-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('sparseinv')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Takahashi_Davis")
> ### * Takahashi_Davis
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Takahashi_Davis
> ### Title: Takahashi equations
> ### Aliases: Takahashi_Davis
> ### Keywords: Cholesky factor, inverse sparse subset
> 
> ### ** Examples
> 
> require(Matrix)
Loading required package: Matrix
> Q = sparseMatrix(i=c(1,1,2,2),j=c(1,2,1,2),x=c(0.1,0.2,0.2,1))
> X <- cholPermute(Q)
> S_partial = Takahashi_Davis(Q,cholQp = X$Qpermchol,P=X$P)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("Takahashi_Davis", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching 'package:Matrix'

> nameEx("cholPermute")
> ### * cholPermute
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: cholPermute
> ### Title: Sparse Cholesky Factorisation with fill-in reducing permutations
> ### Aliases: cholPermute
> ### Keywords: Cholesky factor
> 
> ### ** Examples
> 
> require(Matrix)
Loading required package: Matrix
> cholPermute(sparseMatrix(i=c(1,1,2,2),j=c(1,2,1,2),x=c(0.1,0.2,0.2,1)))
$Qpermchol
2 x 2 sparse Matrix of class "dtCMatrix"
                        
[1,] 0.3162278 .        
[2,] 0.6324555 0.7745967

$P
2 x 2 sparse Matrix of class "dgCMatrix"
        
[1,] 1 .
[2,] . 1

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("cholPermute", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching 'package:Matrix'

> nameEx("cholsolve")
> ### * cholsolve
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: cholsolve
> ### Title: Solve the equation Qx = y
> ### Aliases: cholsolve
> ### Keywords: Cholesky factor, linear solve
> 
> ### ** Examples
> 
> require(Matrix)
Loading required package: Matrix
> Q = sparseMatrix(i=c(1,1,2,2),j=c(1,2,1,2),x=c(0.1,0.2,0.2,1))
> y = matrix(c(1,2),2,1)
> cholsolve(Q,y)
2 x 1 Matrix of class "dgeMatrix"
     [,1]
[1,]   10
[2,]    0
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("cholsolve", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching 'package:Matrix'

> nameEx("cholsolveAQinvAT")
> ### * cholsolveAQinvAT
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: cholsolveAQinvAT
> ### Title: Solve the equation X = AQ^-1t(A) under permutations
> ### Aliases: cholsolveAQinvAT
> ### Keywords: Cholesky factor, linear solve
> 
> ### ** Examples
> 
> require(Matrix)
Loading required package: Matrix
> Q <- sparseMatrix(i=c(1,1,2,2),j=c(1,2,1,2),x=c(0.1,0.2,0.2,1))
> X <- cholPermute(Q)
> y <- matrix(c(1,2),2,1)
> A <- y %*% t(y)
> cholsolveAQinvAT(Q,A,X$Qpermchol,X$P)
2 x 2 Matrix of class "dgeMatrix"
     [,1] [,2]
[1,]   10   20
[2,]   20   40
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("cholsolveAQinvAT", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching 'package:Matrix'

> nameEx("densify")
> ### * densify
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: densify
> ### Title: Densify with explicit zeroes
> ### Aliases: densify
> 
> ### ** Examples
> 
> require(Matrix)
Loading required package: Matrix
> Q1 <- sparseMatrix(i=c(1,2,2),j=c(1,1,2),x=c(0.1,0.2,1))
> Q2 <- sparseMatrix(i=c(1,1,2,2),j=c(1,2,1,2),x=c(0.1,0.3,0.2,1))
> Q1dens <- densify(Q1,Q2)
> Q1
2 x 2 sparse Matrix of class "dgCMatrix"
          
[1,] 0.1 .
[2,] 0.2 1
> Q1dens
2 x 2 sparse Matrix of class "dgCMatrix"
          
[1,] 0.1 0
[2,] 0.2 1
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("densify", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()

detaching 'package:Matrix'

> nameEx("symb")
> ### * symb
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: symb
> ### Title: Return the symbolic representation of a Matrix
> ### Aliases: symb
> 
> ### ** Examples
> 
> require(Matrix)
Loading required package: Matrix
> Q <- sparseMatrix(i=c(1,2,2),j=c(1,1,2),x=c(0.1,0.2,1))
> Qsymb <- symb(Q)
> Qsymb
2 x 2 sparse Matrix of class "dgCMatrix"
        
[1,] 1 .
[2,] 1 1
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("symb", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.63 0.08 1.72 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
